<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eugene Codes]]></title>
  <link href="http://eugmill.github.io/atom.xml" rel="self"/>
  <link href="http://eugmill.github.io/"/>
  <updated>2014-05-05T13:14:02-04:00</updated>
  <id>http://eugmill.github.io/</id>
  <author>
    <name><![CDATA[Eugene Millerman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Palindromes, Sets and XOR]]></title>
    <link href="http://eugmill.github.io/blog/2014/05/01/palindromes-sets-xor/"/>
    <updated>2014-05-01T15:10:48-04:00</updated>
    <id>http://eugmill.github.io/blog/2014/05/01/palindromes-sets-xor</id>
    <content type="html"><![CDATA[<p>My Flatiron School classmate Arielle Sullivan posted <a href="https://medium.com/p/ab6f4ef849d">her solution</a> to an interesting programming puzzle:</p>

<blockquote><p>Determine whether the letters in a given string can be arranged to form a palindrome.</p></blockquote>

<p>Her solutions is below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">possible_palindrome?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">uniq_chars</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">next_char</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">uniq_chars</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">next_char</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uniq_chars</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">next_char</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">uniq_chars</span> <span class="o">&lt;&lt;</span> <span class="n">next_char</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">uniq_chars</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span><span class="mi">1</span> <span class="o">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The gist of it is this: Iterate through the string to make sure at most one character is unpaired. So for instance with <code>lloo</code>, every character is paired up, so we can make the palindrome <code>lool</code>. The same with <code>llo</code> making the palindone <code>lol</code>.</p>

<p>If two or more characters are unpaired, this breaks down. So for instance <code>lllo</code> has an unpaired <code>l</code> and therefore can&rsquo;t form a palindrome.</p>

<p>Looking at line 2 above, my first throught was that this was a good case for the ruby <code>inject</code> method (or <code>reduce</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">possible_palindrome?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">uniq_chars</span><span class="p">,</span><span class="n">next_char</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">uniq_chars</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">next_char</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uniq_chars</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">next_char</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">uniq_chars</span> <span class="o">&lt;&lt;</span> <span class="n">next_char</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking good! But something was bothering me. We&rsquo;re essentially doing the following:
&ndash; If the array of uniques has a character, remove it.
&ndash; If it doesn&rsquo;t have a character, add it.</p>

<p>This is essentailly the <code>XOR</code> or <a href="http://en.wikipedia.org/wiki/Exclusive_or"><em>exclusive or</em></a> operator! In ruby the xor operator is the <code>^</code> character. In boolean expressions, it returns true if one of two expressions is true but not both.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">true</span> <span class="o">^</span> <span class="kp">true</span>   <span class="c1">#=&gt;false</span>
</span><span class='line'><span class="kp">true</span> <span class="o">^</span> <span class="kp">false</span>  <span class="c1">#=&gt;true</span>
</span><span class='line'><span class="kp">false</span> <span class="o">^</span> <span class="kp">true</span>  <span class="c1">#=&gt;true</span>
</span><span class='line'><span class="kp">false</span> <span class="o">^</span> <span class="kp">false</span> <span class="c1">#=&gt;false</span>
</span></code></pre></td></tr></table></div></figure>


<p>How does this translate to sets and characters? Well, if we have two sets of characters, we can xor them together to get the characters in either but not in both. This is exactly what we want. Unforunately, you can&rsquo;t natively xor two arrays in ruby, but you can with the <a href="http://www.ruby-doc.org/stdlib-2.1.1/libdoc/set/rdoc/Set.html">Set</a> class. Let&rsquo;s give it a try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;set&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">possible_palindrome?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">Set</span><span class="o">.</span><span class="n">new</span> <span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">uniq_chars</span><span class="p">,</span><span class="n">next_char</span><span class="o">|</span>
</span><span class='line'>    <span class="n">uniq_chars</span> <span class="o">^</span> <span class="o">[</span><span class="n">next_char</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even better! If we wanted to do this without the Set class, we can xor two arrays ourselves:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">arr2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">arr1</span> <span class="o">+</span> <span class="n">arr2</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">arr1</span> <span class="o">&amp;</span> <span class="n">arr2</span><span class="p">)</span> <span class="c1">#=&gt; [1,2,3,3] - [3] =&gt; [1,2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s break this down. <code>(arr1 + arr2)</code> returns an array that combines the two arrays. <code>(arr1 &amp; arr2)</code> returns an array of items in both. Subtracting the latter from the former results in items that are in either one but not in both.</p>

<p>So our final solution, sans sets would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">possible_palindrome?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">uniq_chars</span><span class="p">,</span><span class="n">next_char</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="n">uniq_chars</span> <span class="o">+</span> <span class="o">[</span><span class="n">next_char</span><span class="o">]</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">uniq_chars</span> <span class="o">&amp;</span> <span class="o">[</span><span class="n">next_char</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Javascript Events with 2048]]></title>
    <link href="http://eugmill.github.io/blog/2014/03/28/custom-javascript-events-with-2048/"/>
    <updated>2014-03-28T11:54:09-04:00</updated>
    <id>http://eugmill.github.io/blog/2014/03/28/custom-javascript-events-with-2048</id>
    <content type="html"><![CDATA[<p>After wasting a few hours playing with 2048, I realized that hey, I’m learning javascript, and 2048 is Javascript! I dove into the 2048 source code to see what I could find.</p>

<p>2048 is entirely client side, which means there is no server to manage. A high level view of the code is below:</p>

<ul>
<li><em>application.js</em> – Launches the game</li>
<li><em>game_manager.js</em> – Acts as the main controller</li>
<li><em>grid.js</em> – Represents the state of the game board</li>
<li><em>tile.js</em> – Represents a single tile object</li>
<li><em>html_actuator.js</em> – Deals with the front end and updating the html itself.</li>
<li><em>keyboard_input_manager.js</em> – Deals with the input, whether it be keyboard or phone swipes</li>
<li><em>local_storage_manager.js</em> – Deals with saving game state.</li>
</ul>


<p>Great! Let’s take a look. When the game is started, the GameManager constructor takes in the html_actuator, keyboard_input_manager and storage_manager objects as arguments. We do some basic initializing, and then this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">GameManager</span><span class="p">(</span><span class="nx">size</span><span class="p">,</span> <span class="nx">InputManager</span><span class="p">,</span> <span class="nx">Actuator</span><span class="p">,</span> <span class="nx">StorageManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">inputManager</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;move&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">inputManager</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;restart&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">restart</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">inputManager</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;keepPlaying&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">restart</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Up until then, I had only really dealt with pretty basic DOM events. Click, hover, submit, were dependable and familiar. Wtf is restart?</p>

<h3>Custom Events</h3>

<p>Some digging led me to reading about custom events in Javascript. Custom events are pretty much exactly like DOM events, but both the dispatches and the listeners are defined by you.</p>

<p>From the mozilla documentation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Listen for the event.</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{...},</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Dispath the event.</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">dispathEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also include data in the events you throw.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;detail&#39;</span><span class="o">:</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">time</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">eventHandler</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The time is: &#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So where does that leave us? Let&rsquo;s take another look at the 2048 code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">KeyboardInputManager</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">on</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">event</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">event</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">event</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">KeyboardInputManager</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">emit</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">callbacks</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">event</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">callbacks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">callbacks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">callback</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">KeyboardInputManager</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">listen</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>        <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;move&quot;</span><span class="p">,</span> <span class="nx">mapped</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The “on” method let’s us attach callbacks to custom events in the InputManager object. The emit function let’s us throw custom events with directional data attached to them.</p>

<p>Let’s go over the steps in order</p>

<ol>
<li>I hit the up arrow on the keyboard</li>
<li>The listen function captures it and “emits” a “move” event with data “up”</li>
<li>The emit function calls the callback for “move”, which points to the move function in the GameManager.</li>
</ol>


<p>What about this weird bind thing? Well, the “on” method is defined in the InputManager object, but the callback function, “move”, is defined in the Gamemanager.</p>

<p>We are telling the callback that when it refers to “this”, it should refer to the GameManager, not the InputManager, even though it will be called from the InputManager.</p>

<p>In conclusion, reading through other people’s source code can be both educational and useful. Since I’ve started reading through it, not only have I become a better developer, but it makes playing 2048 itself a lot easier:</p>

<p><img class="center" src="http://eugmill.github.io/images/2014-03-28-2048.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Rack, Really?]]></title>
    <link href="http://eugmill.github.io/blog/2014/03/03/what-is-rack/"/>
    <updated>2014-03-03T08:09:39-05:00</updated>
    <id>http://eugmill.github.io/blog/2014/03/03/what-is-rack</id>
    <content type="html"><![CDATA[<p>After spending some time on Ruby foundations, we’ve finally moved onto the web at Flatiron School&#8217;s’s 5th Ruby class. The first topic we covered was <a href="http://rack.github.io/">rack</a>. According to the official site:</p>

<blockquote><p>&ldquo;Rack provides a minimal interface between webservers supporting Ruby and Ruby frameworks.”</p></blockquote>

<p>Well, that helps. Let’s break it down. What exactly is a web server? In its simplest form, you can implement a web server by doing the following:</p>

<ol>
<li>Listen to a port (80 most of the time) until a request comes in</li>
<li>Deal with the request</li>
<li>Output the response</li>
<li>goto 1</li>
</ol>


<p>That sounds great! But we don’t want to implement that from scratch. Luckily, there are plenty of web servers already out there! Not only does rack let you easily switch between web servers, it also let’s you use the same middleware across different applications.</p>

<h3>Taking a step back</h3>

<p>In essence, there was a time where if you wanted to write a web app in Ruby, you had to write the interface to the server, which would change depending on the server you used. No more!</p>

<p>Some big points to take away:</p>

<ol>
<li><p>Ruby is not a language for web development.
Given the immense popularity of Rails, it’s easy to assume that Ruby was created as a language for web development. In reality, it was created as a general purpose language, and the tools for web development were added over time. Rack and rails are two such tools. The former is a framework, and Rack is the interface that connects the framework to the servers themselves.</p></li>
<li><p>The web itself is language agnostic
If we take a really big picture view of the web, it is just a bunch of http requests getting flung back and forth between computers. Everything is text and ultimately, whatever language is used on the server will have to create and receive http requests. Rack handles that aspect for Ruby applications.</p></li>
</ol>


<p>Sources:</p>

<p><a href="http://stackoverflow.com/questions/15875941/creating-a-web-app-in-ruby-without-a-framework">http://stackoverflow.com/questions/15875941/creating-a-web-app-in-ruby-without-a-framework</a></p>

<p><a href="http://www.youtube.com/watch?v=iJ-ZsWtHTIg">http://www.youtube.com/watch?v=iJ-ZsWtHTIg</a></p>

<p><a href="http://rack.github.io/">http://rack.github.io/</a></p>

<p><a href="http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html">http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging with Battleship]]></title>
    <link href="http://eugmill.github.io/blog/2014/02/16/logging-with-battleship/"/>
    <updated>2014-02-16T08:19:22-05:00</updated>
    <id>http://eugmill.github.io/blog/2014/02/16/logging-with-battleship</id>
    <content type="html"><![CDATA[<p>After the first week at flatiron School, I decided to <del>punish</del> challenge myself by joining the <a href="http://www.meetup.com/Ruby-Fight-Club/">Ruby Fight Club</a> meetup and signing myself up for the Battleship competition.</p>

<p>The task at hand is to code a simple player class that plays battleship by doing two things:</p>

<ol>
<li>Placing its ships at the beginning of a game</li>
<li>Given the state of the game board and the remaining ships, making a move by returning a set of x,y coordinates.</li>
</ol>


<p>My strategy loosely follows the <a href="http://www.datagenetics.com/blog/december32011/index.html">one posted by Nick Berry</a>. While I’ll save the details for another post, the strategy has two basic modes:</p>

<ul>
<li>Search mode – No ship locations are known.</li>
<li>Hunt mode – There has been a hit but the ship hasn’t been sunk.</li>
</ul>


<p>In search mode, the algorithm tries to calculate the most likely places for a ship to have been hidden, using the known information about missed shots and remaining ships. In hunt mode, a ship has been hit and the algorithm looks around the successful hit until the ship has been sunk.</p>

<p>At first I tried my best to be a good little Ruby student and go the test/behavior driven development route. This strategy worked well for setting up many of the early helper methods and even test some of the basic early game strategy. For instance, in the beginning of the game, the four cells in the center have the highest probability of having a ship, so the get_best_moves method should always include [4,4]. Rspec makes testing this ridiculously simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@eugmill</span> <span class="o">=</span> <span class="no">EugmillPlayer</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;#get_best_moves&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should include center coordinates for a blank board&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="vi">@eugmill</span><span class="o">.</span><span class="n">get_best_moves</span><span class="p">(</span><span class="n">board1</span><span class="p">,</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="o">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bigger problems</h2>

<p>Testing with Rspec worked beautifully for these early game scenarios, when our Player object was still innocent and the board untouched by the violence of naval warfare. Difficulty arises when testing for and troubleshooting scenarios 20 moves into the game.</p>

<p>Enter the logger class. Ruby’s built-in logger lets you write to files to keep track of what happens in your application. This way, when your player class makes a bizarre move halfway into the game, you can see exactly what was going on inside your class, as well as the list of moves leading up to that move. Here is an example of one of my log files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">225023</span> <span class="c1">#89817]  INFO -- board states: </span>
</span><span class='line'>   <span class="mi">0</span>  <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">4</span>  <span class="mi">5</span>  <span class="mi">6</span>  <span class="mi">7</span>  <span class="mi">8</span>  <span class="mi">9</span>
</span><span class='line'><span class="mi">0</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">1</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">2</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span><span class="n">H</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">3</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">4</span> <span class="o">[</span> <span class="o">][</span><span class="n">H</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">5</span> <span class="o">[</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">6</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">7</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">8</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">9</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">225136</span> <span class="c1">#89817]  INFO -- search mode: Move 16,Getting best move...</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">233883</span> <span class="c1">#89817]  INFO -- game state: Making move 4,0</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">631970</span> <span class="c1">#89817]  INFO -- hit: It was a hit!!!</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">632115</span> <span class="c1">#89817]  INFO -- hit: [[4, 1], [2, 2], [4, 0]]</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">632235</span> <span class="c1">#89817]  INFO -- hit: Ship sunk!size:2</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">632408</span> <span class="c1">#89817]  INFO -- hit: Sunk ship coords: [[4, 0], [4, 1]]</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">633557</span> <span class="c1">#89817]  INFO -- board states: </span>
</span><span class='line'>   <span class="mi">0</span>  <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">4</span>  <span class="mi">5</span>  <span class="mi">6</span>  <span class="mi">7</span>  <span class="mi">8</span>  <span class="mi">9</span>
</span><span class='line'><span class="mi">0</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">1</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">2</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span><span class="n">H</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">3</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">4</span> <span class="o">[</span><span class="n">H</span><span class="o">][</span><span class="n">H</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">5</span> <span class="o">[</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">6</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">7</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">8</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span><span class="n">M</span><span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span><span class='line'><span class="mi">9</span> <span class="o">[</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">][</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>From this we know that on move 16, it takes a shot at [4,0]. We can do this for any move in the game. Now if we’re curious about why it made that move, we can also pull up our second log file which logs the probability distributions for the board at each move:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">233150</span> <span class="c1">#89817]  INFO -- pboard: Board for move 16</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2014</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">16</span><span class="ss">T14</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">233301</span> <span class="c1">#89817]  INFO -- pboard: </span>
</span><span class='line'><span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">14</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">15</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">19</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">19</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">7</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">22</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">17</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">5</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">7</span> <span class="p">,</span> <span class="mi">7</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">17</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">17</span><span class="p">,</span> <span class="mi">5</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">7</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">19</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">17</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">7</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">15</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">14</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Skipping over how the probability weights are calculated, we can see that cell [4,0] has a weight of 22, which is the maximum for this board, and also the reason it was targeted.</p>

<p>So how do we set up our logging? In this case, we initialize our loggers whenever a new Player object is created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EugmillPlayer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@movelogger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;./players/logs/mylog.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@boardlogger</span><span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;./players/logs/board_log.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, whenever we want to log a piece of information, we can call our logger</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;board states&#39;</span><span class="p">){</span><span class="n">pprint_board</span><span class="p">(</span><span class="n">state</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@target_mode</span> <span class="o">==</span> <span class="ss">:search</span>
</span><span class='line'>    <span class="vi">@logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;search mode&quot;</span><span class="p">)</span> <span class="p">{</span><span class="s2">&quot;Move </span><span class="si">#{</span><span class="vi">@move_counter</span><span class="si">}</span><span class="s2">,Getting best move...&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="n">moves</span> <span class="o">=</span> <span class="n">get_best_moves</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">ships_remaining</span><span class="p">,</span><span class="n">pboard</span><span class="p">)</span>
</span><span class='line'>    <span class="n">row</span><span class="p">,</span><span class="n">col</span> <span class="o">=</span> <span class="n">moves</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">moves</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;game state&#39;</span><span class="p">)</span> <span class="p">{</span><span class="s2">&quot;Making move </span><span class="si">#{</span><span class="n">row</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The logger has different severity levels, depending on whether we’re logging an error or just debugging information. There are multiple ways to pass messages to our logger. In this case I am passing a label as a string parameter, and a the bulk the message in a block. The result looks like the screenshot posted above.</p>

<p>From a technical perspective, there isn’t anything difficult about the logger class. If the logging is too terse, debugging is difficult, and if it is too verbose, the logs grow out of control pretty quickly. Finding the right mix makes logger indespensible to debugging complex scenarios quickly.</p>

<p>Ultimately, I found logger to be complementary to Rspec, rather than a replacement.  With Logger I can catch strange behavior and try to reproduce it, while with Rspec I can make sure to test for and prevent the same errors from happening again.</p>
]]></content>
  </entry>
  
</feed>
