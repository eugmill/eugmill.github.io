<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eugene Codes]]></title>
  <link href="http://eugmill.github.io/atom.xml" rel="self"/>
  <link href="http://eugmill.github.io/"/>
  <updated>2014-04-21T22:05:53-04:00</updated>
  <id>http://eugmill.github.io/</id>
  <author>
    <name><![CDATA[Eugene Millerman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Javascript Events with 2048]]></title>
    <link href="http://eugmill.github.io/blog/2014/03/28/custom-javascript-events-with-2048/"/>
    <updated>2014-03-28T11:54:09-04:00</updated>
    <id>http://eugmill.github.io/blog/2014/03/28/custom-javascript-events-with-2048</id>
    <content type="html"><![CDATA[<p>After wasting a few hours playing with 2048, I realized that hey, I’m learning javascript, and 2048 is Javascript! I dove into the 2048 source code to see what I could find.</p>

<p>2048 is entirely client side, which means there is no server to manage. A high level view of the code is below:</p>

<ul>
<li><em>application.js</em> – Launches the game</li>
<li><em>game_manager.js</em> – Acts as the main controller</li>
<li><em>grid.js</em> – Represents the state of the game board</li>
<li><em>tile.js</em> – Represents a single tile object</li>
<li><em>html_actuator.js</em> – Deals with the front end and updating the html itself.</li>
<li><em>keyboard_input_manager.js</em> – Deals with the input, whether it be keyboard or phone swipes</li>
<li><em>local_storage_manager.js</em> – Deals with saving game state.</li>
</ul>

]]></content>
  </entry>
  
</feed>
