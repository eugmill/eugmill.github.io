<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Eugene Codes]]></title>
  <link href="http://eugmill.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://eugmill.github.io/"/>
  <updated>2014-05-06T13:29:49-04:00</updated>
  <id>http://eugmill.github.io/</id>
  <author>
    <name><![CDATA[Eugene Millerman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamic finders and Ghost methods in Ruby and Rails]]></title>
    <link href="http://eugmill.github.io/blog/2014/05/05/ghost-methods-in-ruby-and-rails/"/>
    <updated>2014-05-05T15:37:29-04:00</updated>
    <id>http://eugmill.github.io/blog/2014/05/05/ghost-methods-in-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>Rails does a lot for you, including dynamically generating methods like <code>find_by_[attribute]</code>, for every attribute your model has. I had always assumed that rails generated the methods when you start it up. While it&rsquo;s true that rails generates the methods for you, it&rsquo;s the where and the how that&rsquo;s interesting.</p>

<h2><code>method_missing</code></h2>

<p>When you send an object a method in Ruby, it first looks for that method in the object itself, then it looks up the inheritance chain. What happens if it reaches the <code>Object</code> class and still can&rsquo;t find the method? It calls <code>method_missing</code>, which is defined on <code>Object</code>.</p>

<p>```ruby
class Animal
  attr_accessor :sound</p>

<p>  EMOTIONS = {confused:&lsquo;?&rsquo;,</p>

<pre><code>          surprised:'!'}
</code></pre>

<p>  def initialize(sound)</p>

<pre><code>self.sound = sound
</code></pre>

<p>  end</p>

<p>  def confused_sound</p>

<pre><code>sound + EMOTIONS[:confused]
</code></pre>

<p>  end</p>

<p>end</p>

<p>whiskers = Animal.new(&ldquo;meow&rdquo;)</p>

<p>puts whiskers.sound #=> meow
puts whiskers.confused_sound #=> meow?
puts whiskers.surprised_sound #=> NoMethodError
<code>``
So how can we take advantage of this? By overriding</code>method_missing<code>, we can actually create dynamic methods on the fly. So before, we were adding the</code>[emotion]_sound` manually, now we can add them dynamically.</p>

<p>```ruby
class Animal
  attr_accessor :sound</p>

<p>  EMOTIONS = {confused:&lsquo;?&rsquo;,</p>

<pre><code>          surprised:'!'}
</code></pre>

<p>  def initialize(sound)</p>

<pre><code>self.sound = sound
</code></pre>

<p>  end</p>

<p>  def method_missing(name, *args)</p>

<pre><code>if match = EMOTIONS.keys.find{|emotion| name.match(/#{emotion}_sound/)}
  sound + EMOTIONS[match]
else
  super
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>whiskers = Animal.new(&ldquo;meow&rdquo;)</p>

<p>puts whiskers.sound #=> meow
puts whiskers.confused_sound #=> meow?
puts whiskers.surprised_sound #=> meow!
puts whiskers.angry_sound #=> NoMethodError
```</p>

<p>Now, as long as our Animal class has a particular emotion, we can call <code>[emotion]_sound</code> without defining it ourselves.</p>

<h2><code>respond_to?</code> and <code>respond_to_missing?</code></h2>

<p>Now we need to be able to tell that our Animal class has a method called <code>confused_sound</code> but not <code>angry_sound</code>. The way we do that is by overriding the <code>respond_to?</code> or <code>respond_to_missing?</code> methods. <code>respond_to_missing?</code> has the advantage in that it allows us to use <code>whiskers.method</code> , such as <code>whiskers.method(:confused_sound)</code>.</p>

<p>```ruby
class Animal
  &hellip;
  def respond_to_missing?(name, include_private=false)</p>

<pre><code>EMOTIONS.keys.any?{|emotion| name.match(/#{emotion}_sound/)} || super
</code></pre>

<p>  end
end</p>

<p>whiskers.respond_to?(&ldquo;sound&rdquo;) #=> true
whiskers.respond_to?(&ldquo;confused_sound&rdquo;) #=> true
whiskers.respond_to?(&ldquo;angry_sound&rdquo;) #=> false
<code>``
These are called _ghost methods_ because if we call</code>whiskers.methods<code>,</code>confused_sound` won&rsquo;t show up.</p>

<h2>Rails and Ghost methods</h2>

<p>Coming back to Rails, we can see how <code>method_missing</code> can be used to dynamically define finders such as <code>find_by_name</code>, <code>find_by_age</code>, etc. However, going through <code>method_missing</code> every time can be a little slow.</p>

<p>As a result, Rails gets even more meta and actually defines the finders as methods on the Model the first time they are called. This way, they are essentially cached, and the next call will no longer go through <code>method_missing</code>.</p>

<p>Stay tuned for a future post on other details of metaprogramming in Rails with <code>define_method</code> and <code>instance_eval</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Palindromes, Sets and XOR]]></title>
    <link href="http://eugmill.github.io/blog/2014/05/01/palindromes-sets-xor/"/>
    <updated>2014-05-01T15:10:48-04:00</updated>
    <id>http://eugmill.github.io/blog/2014/05/01/palindromes-sets-xor</id>
    <content type="html"><![CDATA[<p>My Flatiron School classmate Arielle Sullivan posted <a href="https://medium.com/p/ab6f4ef849d">her solution</a> to an interesting programming puzzle:</p>

<blockquote><p>Determine whether the letters in a given string can be arranged to form a palindrome.</p></blockquote>

<p>Her solutions is below:
```ruby
def possible_palindrome?(string)
  uniq_chars = []
  string.chars.each do |next_char|</p>

<pre><code>if uniq_chars.include?(next_char)
  uniq_chars.delete(next_char)
else
  uniq_chars &lt;&lt; next_char
end
</code></pre>

<p>  end
  uniq_chars.length &lt;=1 ? true : false
end
<code>``
The gist of it is this: Iterate through the string to make sure at most one character is unpaired. So for instance with</code>lloo<code>, every character is paired up, so we can make the palindrome</code>lool<code>. The same with</code>llo<code>making the palindrome</code>lol`.</p>

<p>If two or more characters are unpaired, this breaks down. So for instance <code>lllo</code> has an unpaired <code>l</code> and therefore can&rsquo;t form a palindrome.</p>

<p>Looking at line 2 above, my first thought was that this was a good case for the ruby <code>inject</code> method (or <code>reduce</code>).</p>

<p>```ruby
def possible_palindrome?(string)
  string.chars.inject([]) do |uniq_chars,next_char|</p>

<pre><code>if uniq_chars.include?(next_char)
  uniq_chars.delete(next_char)
else
  uniq_chars &lt;&lt; next_char
end
</code></pre>

<p>  end.length &lt;=1
end
```</p>

<p>Looking good! But something was bothering me. We&rsquo;re essentially doing the following:
&ndash; If the array of uniques has a character, remove it.
&ndash; If it doesn&rsquo;t have a character, add it.</p>

<p>This is essentially the <code>XOR</code> or <a href="http://en.wikipedia.org/wiki/Exclusive_or"><em>exclusive or</em></a> operator! In ruby the xor operator is the <code>^</code> character. In boolean expressions, it returns true if one of two expressions is true but not both.</p>

<p><code>ruby
true ^ true   #=&gt;false
true ^ false  #=&gt;true
false ^ true  #=&gt;true
false ^ false #=&gt;false
</code>
How does this translate to sets and characters? Well, if we have two sets of characters, we can xor them together to get the characters in either but not in both. This is exactly what we want. Unfortunately, you can&rsquo;t natively xor two arrays in ruby, but you can with the <a href="http://www.ruby-doc.org/stdlib-2.1.1/libdoc/set/rdoc/Set.html">Set</a> class. Let&rsquo;s give it a try:
```ruby
require &lsquo;set&rsquo;</p>

<p>def possible_palindrome?(string)
  string.chars.inject(Set.new []) do |uniq_chars,next_char|</p>

<pre><code>uniq_chars ^ [next_char]
</code></pre>

<p>  end.length &lt;=1
end
<code>
Even better! If we wanted to do this without the Set class, we can xor two arrays ourselves:
</code>ruby
arr1 = [1,2,3]
arr2 = [3]</p>

<p>(arr1 + arr2) &ndash; (arr1 &amp; arr2) #=> [1,2,3,3] &ndash; [3] => [1,2]
<code>``
Let's break this down.</code>(arr1 + arr2)<code>returns an array that combines the two arrays.</code>(arr1 &amp; arr2)` returns an array of items in both. Subtracting the latter from the former results in items that are in either one but not in both.</p>

<p>So our final solution, sans sets would be:
```ruby
def possible_palindrome?(string)
  string.chars.inject([]) do |uniq_chars,next_char|</p>

<pre><code>(uniq_chars + [next_char]) - (uniq_chars &amp; [next_char])
</code></pre>

<p>  end.length &lt;=1
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Rack, Really?]]></title>
    <link href="http://eugmill.github.io/blog/2014/03/03/what-is-rack/"/>
    <updated>2014-03-03T08:09:39-05:00</updated>
    <id>http://eugmill.github.io/blog/2014/03/03/what-is-rack</id>
    <content type="html"><![CDATA[<p>After spending some time on Ruby foundations, we’ve finally moved onto the web at Flatiron School's’s 5th Ruby class. The first topic we covered was <a href="http://rack.github.io/">rack</a>. According to the official site:</p>

<blockquote><p>&ldquo;Rack provides a minimal interface between webservers supporting Ruby and Ruby frameworks.”</p></blockquote>

<p>Well, that helps. Let’s break it down. What exactly is a web server? In its simplest form, you can implement a web server by doing the following:</p>

<ol>
<li>Listen to a port (80 most of the time) until a request comes in</li>
<li>Deal with the request</li>
<li>Output the response</li>
<li>goto 1</li>
</ol>


<p>That sounds great! But we don’t want to implement that from scratch. Luckily, there are plenty of web servers already out there! Not only does rack let you easily switch between web servers, it also let’s you use the same middleware across different applications.</p>

<h3>Taking a step back</h3>

<p>In essence, there was a time where if you wanted to write a web app in Ruby, you had to write the interface to the server, which would change depending on the server you used. No more!</p>

<p>Some big points to take away:</p>

<ol>
<li><p>Ruby is not a language for web development.
Given the immense popularity of Rails, it’s easy to assume that Ruby was created as a language for web development. In reality, it was created as a general purpose language, and the tools for web development were added over time. Rack and rails are two such tools. The former is a framework, and Rack is the interface that connects the framework to the servers themselves.</p></li>
<li><p>The web itself is language agnostic
If we take a really big picture view of the web, it is just a bunch of http requests getting flung back and forth between computers. Everything is text and ultimately, whatever language is used on the server will have to create and receive http requests. Rack handles that aspect for Ruby applications.</p></li>
</ol>


<p>Sources:</p>

<p><a href="http://stackoverflow.com/questions/15875941/creating-a-web-app-in-ruby-without-a-framework">http://stackoverflow.com/questions/15875941/creating-a-web-app-in-ruby-without-a-framework</a></p>

<p><a href="http://www.youtube.com/watch?v=iJ-ZsWtHTIg">http://www.youtube.com/watch?v=iJ-ZsWtHTIg</a></p>

<p><a href="http://rack.github.io/">http://rack.github.io/</a></p>

<p><a href="http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html">http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging with Battleship]]></title>
    <link href="http://eugmill.github.io/blog/2014/02/16/logging-with-battleship/"/>
    <updated>2014-02-16T08:19:22-05:00</updated>
    <id>http://eugmill.github.io/blog/2014/02/16/logging-with-battleship</id>
    <content type="html"><![CDATA[<p>After the first week at flatiron School, I decided to <del>punish</del> challenge myself by joining the <a href="http://www.meetup.com/Ruby-Fight-Club/">Ruby Fight Club</a> meetup and signing myself up for the Battleship competition.</p>

<p>The task at hand is to code a simple player class that plays battleship by doing two things:</p>

<ol>
<li>Placing its ships at the beginning of a game</li>
<li>Given the state of the game board and the remaining ships, making a move by returning a set of x,y coordinates.</li>
</ol>


<p>My strategy loosely follows the <a href="http://www.datagenetics.com/blog/december32011/index.html">one posted by Nick Berry</a>. While I’ll save the details for another post, the strategy has two basic modes:</p>

<ul>
<li>Search mode – No ship locations are known.</li>
<li>Hunt mode – There has been a hit but the ship hasn’t been sunk.</li>
</ul>


<p>In search mode, the algorithm tries to calculate the most likely places for a ship to have been hidden, using the known information about missed shots and remaining ships. In hunt mode, a ship has been hit and the algorithm looks around the successful hit until the ship has been sunk.</p>

<p>At first I tried my best to be a good little Ruby student and go the test/behavior driven development route. This strategy worked well for setting up many of the early helper methods and even test some of the basic early game strategy. For instance, in the beginning of the game, the four cells in the center have the highest probability of having a ship, so the get_best_moves method should always include [4,4]. Rspec makes testing this ridiculously simple:</p>

<p>```ruby
before(:each) do
  @eugmill = EugmillPlayer.new()
end</p>

<p>describe &ldquo;#get_best_moves&rdquo; do
  it &ldquo;should include center coordinates for a blank board&rdquo; do</p>

<pre><code>expect(@eugmill.get_best_moves(board1,[2,3,3,4,5])).to include([4,4]) 
</code></pre>

<p>  end
end
```</p>

<h2>Bigger problems</h2>

<p>Testing with Rspec worked beautifully for these early game scenarios, when our Player object was still innocent and the board untouched by the violence of naval warfare. Difficulty arises when testing for and troubleshooting scenarios 20 moves into the game.</p>

<p>Enter the logger class. Ruby’s built-in logger lets you write to files to keep track of what happens in your application. This way, when your player class makes a bizarre move halfway into the game, you can see exactly what was going on inside your class, as well as the list of moves leading up to that move. Here is an example of one of my log files:</p>

<p>```ruby
I, [2014-02-16T14:27:05.225023 #89817]  INFO &mdash; board states:
   0  1  2  3  4  5  6  7  8  9
0 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
1 [ ][ ][ ][ ][M][ ][ ][ ][ ][ ]
2 [ ][ ][H][ ][ ][ ][M][ ][ ][ ]
3 [ ][ ][ ][M][ ][ ][ ][M][ ][ ]
4 [ ][H][ ][ ][ ][M][ ][ ][ ][ ]
5 [ ][M][ ][ ][M][ ][ ][ ][M][ ]
6 [ ][ ][M][ ][ ][ ][M][ ][ ][ ]
7 [ ][ ][ ][M][ ][ ][ ][M][ ][ ]
8 [ ][ ][ ][ ][ ][M][ ][ ][ ][ ]
9 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]</p>

<p>I, [2014-02-16T14:27:05.225136 #89817]  INFO &mdash; search mode: Move 16,Getting best move&hellip;
I, [2014-02-16T14:27:05.233883 #89817]  INFO &mdash; game state: Making move 4,0
I, [2014-02-16T14:27:05.631970 #89817]  INFO &mdash; hit: It was a hit!!!
I, [2014-02-16T14:27:05.632115 #89817]  INFO &mdash; hit: [[4, 1], [2, 2], [4, 0]]
I, [2014-02-16T14:27:05.632235 #89817]  INFO &mdash; hit: Ship sunk!size:2
I, [2014-02-16T14:27:05.632408 #89817]  INFO &mdash; hit: Sunk ship coords: [[4, 0], [4, 1]]
I, [2014-02-16T14:27:05.633557 #89817]  INFO &mdash; board states:
   0  1  2  3  4  5  6  7  8  9
0 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
1 [ ][ ][ ][ ][M][ ][ ][ ][ ][ ]
2 [ ][ ][H][ ][ ][ ][M][ ][ ][ ]
3 [ ][ ][ ][M][ ][ ][ ][M][ ][ ]
4 [H][H][ ][ ][ ][M][ ][ ][ ][ ]
5 [ ][M][ ][ ][M][ ][ ][ ][M][ ]
6 [ ][ ][M][ ][ ][ ][M][ ][ ][ ]
7 [ ][ ][ ][M][ ][ ][ ][M][ ][ ]
8 [ ][ ][ ][ ][ ][M][ ][ ][ ][ ]
9 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
```
From this we know that on move 16, it takes a shot at [4,0]. We can do this for any move in the game. Now if we’re curious about why it made that move, we can also pull up our second log file which logs the probability distributions for the board at each move:</p>

<p><code>ruby
I, [2014-02-16T14:27:05.233150 #89817]  INFO -- pboard: Board for move 16
I, [2014-02-16T14:27:05.233301 #89817]  INFO -- pboard:
[10, 15, 19, 19, 17, 21, 17, 17, 15, 10]
[14, 16, 17, 8 , 0 , 12, 10, 15, 18, 15]
[19, 21, 26, 16, 13, 12, 0 , 6 , 15, 17]
[19, 13, 16, 0 , 7 , 8 , 6 , 0 , 10, 17]
[22, 14, 21, 12, 8 , 0 , 8 , 10, 12, 21]
[17, 0 , 6 , 5 , 0 , 6 , 7 , 7 , 0 , 17]
[17, 5 , 0 , 6 , 8 , 7 , 0 , 6 , 8 , 19]
[17, 11, 6 , 0 , 10, 7 , 6 , 0 , 8 , 15]
[15, 16, 15, 10, 12, 0 , 8 , 8 , 14, 14]
[10, 14, 17, 17, 21, 17, 19, 15, 14, 10]
</code>
Skipping over how the probability weights are calculated, we can see that cell [4,0] has a weight of 22, which is the maximum for this board, and also the reason it was targeted.</p>

<p>So how do we set up our logging? In this case, we initialize our loggers whenever a new Player object is created:</p>

<p>```ruby
class EugmillPlayer
  def initialize</p>

<pre><code>@movelogger = Logger.new("./players/logs/mylog.txt")
@boardlogger= Logger.new("./players/logs/board_log.txt")
...
</code></pre>

<p>  end
  &hellip;
end
```</p>

<p>Then, whenever we want to log a piece of information, we can call our logger</p>

<p>```ruby
@logger.info(&lsquo;board states&rsquo;){pprint_board(state)}
  if @target_mode == :search</p>

<pre><code>@logger.info("search mode") {"Move #{@move_counter},Getting best move..."}
moves = get_best_moves(state,ships_remaining,pboard)
row,col = moves[rand(moves.size)]
@logger.info('game state') {"Making move #{row},#{col}"}
</code></pre>

<p>&hellip;
```
The logger has different severity levels, depending on whether we’re logging an error or just debugging information. There are multiple ways to pass messages to our logger. In this case I am passing a label as a string parameter, and a the bulk the message in a block. The result looks like the screenshot posted above.</p>

<p>From a technical perspective, there isn’t anything difficult about the logger class. If the logging is too terse, debugging is difficult, and if it is too verbose, the logs grow out of control pretty quickly. Finding the right mix makes logger indespensible to debugging complex scenarios quickly.</p>

<p>Ultimately, I found logger to be complementary to Rspec, rather than a replacement.  With Logger I can catch strange behavior and try to reproduce it, while with Rspec I can make sure to test for and prevent the same errors from happening again.</p>
]]></content>
  </entry>
  
</feed>
